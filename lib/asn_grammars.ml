open Asn

type bits = Cstruct.t

let def  x = function None -> x | Some y -> y
let def' x = fun y -> if y = x then None else Some y

let projections encoding asn =
  let c = codec encoding asn in
  (decode c, encode c)


(*
 * RSA
 *)

(* the no-decode integer, assuming >= 0 and DER. *)
let nat =
  let f cs =
    Cstruct.(to_string @@
              if get_uint8 cs 0 = 0x00 then shift cs 1 else cs)
  and g str =
    assert false in
  map f g @@
    implicit ~cls:`Universal 0x02 octet_string

let other_prime_infos =
  sequence_of @@
    (sequence3
      (required ~label:"prime"       nat)
      (required ~label:"exponent"    nat)
      (required ~label:"coefficient" nat))

let rsa_private_key =
  let open Cryptokit.RSA in

  let f (_, (n, (e, (d, (p, (q, (dp, (dq, (qinv, _))))))))) =
    let size = String.length n * 8 in
    { size; n; e; d; p; q; dp; dq; qinv }

  and g { size; n; e; d; p; q; dp; dq; qinv } =
    (0, (n, (e, (d, (p, (q, (dp, (dq, (qinv, None))))))))) in

  map f g @@
  sequence @@
      (required ~label:"version"         int)
    @ (required ~label:"modulus"         nat)       (* n    *)
    @ (required ~label:"publicExponent"  nat)       (* e    *)
    @ (required ~label:"privateExponent" nat)       (* d    *)
    @ (required ~label:"prime1"          nat)       (* p    *)
    @ (required ~label:"prime2"          nat)       (* q    *)
    @ (required ~label:"exponent1"       nat)       (* dp   *)
    @ (required ~label:"exponent2"       nat)       (* dq   *)
    @ (required ~label:"coefficient"     nat)       (* qinv *)
   -@ (optional ~label:"otherPrimeInfos" other_prime_infos)


let rsa_public_key =
  let open Cryptokit.RSA in

  let f (n, e) =
    let size = String.length n * 8 in
    { size; n; e; d = ""; p = ""; q = ""; dp = ""; dq = ""; qinv = "" }

  and g { n; e } = (n, e) in

  map f g @@
  sequence2
    (required ~label:"modulus"        nat)
    (required ~label:"publicExponent" nat)

let (rsa_private_of_cstruct, rsa_private_to_cstruct) =
  projections der rsa_private_key

let (rsa_public_of_cstruct, rsa_public_to_cstruct) =
  projections der rsa_public_key


(*
 * X509 certs
 *)

(* This type really conflates two things: the set of pk algos that describe the
 * public key, and the set of hash+pk algo combinations that describe digests.
 * The two are conflated because they are generated by the same ASN grammar,
 * AlgorithmIdentifier, to keep things close to the standards.
 *
 * It's expected that downstream code with pick a subset and add a catch-all
 * that handles unsupported algos anyway.
 *)

type algorithm =
  (* pk algos *)
  | RSA
  | EC_pub_key of OID.t (* should translate the oid too *)
  (* sig algos *)
  | MD2_RSA
  | MD4_RSA
  | MD5_RSA
  | RIPEMD160_RSA
  | SHA1_RSA
  | SHA256_RSA
  | SHA384_RSA
  | SHA512_RSA
  | SHA224_RSA
  | ECDSA_SHA1
  | ECDSA_SHA224
  | ECDSA_SHA256
  | ECDSA_SHA384
  | ECDSA_SHA512

type tBSCertificate = {
  version    : [ `V1 | `V2 | `V3 ] ;
  serial     : Num.num ;
  signature  : algorithm ;
  issuer     : (oid * string) list list ;
  validity   : time * time ;
  subject    : (oid * string) list list ;
  pk_info    : algorithm * bits ;
  issuer_id  : bits option ;
  subject_id : bits option ;
  extensions : (oid * bool * Cstruct.t) list
}

type certificate = {
  tbs_cert       : tBSCertificate ;
  signature_algo : algorithm ;
  signature_val  : bits
}

(* XXX
 *
 * PKCS1/RFC5280 allows params to be `ANY', depending on the algorithm.  I don't
 * know of one that uses anything other than NULL and OID, however, so we accept
 * only that.
 *)

let algorithmIdentifier =
  let open Registry in

  let unit = Some (`C1 ()) in

  let f = function
    | (oid, Some (`C2 oid')) when oid = ANSI_X9_62.ec_pub_key -> EC_pub_key oid'
    | (oid, _) when oid = PKCS1.rsa_encryption  -> RSA

    | (oid, _) when oid = PKCS1.md2_rsa_encryption       -> MD2_RSA
    | (oid, _) when oid = PKCS1.md4_rsa_encryption       -> MD4_RSA
    | (oid, _) when oid = PKCS1.md5_rsa_encryption       -> MD5_RSA
    | (oid, _) when oid = PKCS1.ripemd160_rsa_encryption -> RIPEMD160_RSA
    | (oid, _) when oid = PKCS1.sha1_rsa_encryption      -> SHA1_RSA
    | (oid, _) when oid = PKCS1.sha256_rsa_encryption    -> SHA256_RSA
    | (oid, _) when oid = PKCS1.sha384_rsa_encryption    -> SHA384_RSA
    | (oid, _) when oid = PKCS1.sha512_rsa_encryption    -> SHA512_RSA
    | (oid, _) when oid = PKCS1.sha224_rsa_encryption    -> SHA224_RSA

    | (oid, _) when oid = ANSI_X9_62.ecdsa_sha1   -> ECDSA_SHA1
    | (oid, _) when oid = ANSI_X9_62.ecdsa_sha224 -> ECDSA_SHA224
    | (oid, _) when oid = ANSI_X9_62.ecdsa_sha256 -> ECDSA_SHA256
    | (oid, _) when oid = ANSI_X9_62.ecdsa_sha384 -> ECDSA_SHA384
    | (oid, _) when oid = ANSI_X9_62.ecdsa_sha512 -> ECDSA_SHA512

    | (oid, _) -> parse_error @@
        Printf.sprintf "unknown algorithm (%s) or unexpected params"
                       (OID.to_string oid)

  and g = function
    | EC_pub_key id -> (ANSI_X9_62.ec_pub_key, Some (`C2 id))
    | RSA           -> (PKCS1.rsa_encryption           , unit)
    | MD2_RSA       -> (PKCS1.md2_rsa_encryption       , unit)
    | MD4_RSA       -> (PKCS1.md4_rsa_encryption       , unit)
    | MD5_RSA       -> (PKCS1.md5_rsa_encryption       , unit)
    | RIPEMD160_RSA -> (PKCS1.ripemd160_rsa_encryption , unit)
    | SHA1_RSA      -> (PKCS1.sha1_rsa_encryption      , unit)
    | SHA256_RSA    -> (PKCS1.sha256_rsa_encryption    , unit)
    | SHA384_RSA    -> (PKCS1.sha384_rsa_encryption    , unit)
    | SHA512_RSA    -> (PKCS1.sha512_rsa_encryption    , unit)
    | SHA224_RSA    -> (PKCS1.sha224_rsa_encryption    , unit)
    | ECDSA_SHA1    -> (ANSI_X9_62.ecdsa_sha1          , unit)
    | ECDSA_SHA224  -> (ANSI_X9_62.ecdsa_sha224        , unit)
    | ECDSA_SHA256  -> (ANSI_X9_62.ecdsa_sha256        , unit)
    | ECDSA_SHA384  -> (ANSI_X9_62.ecdsa_sha384        , unit)
    | ECDSA_SHA512  -> (ANSI_X9_62.ecdsa_sha512        , unit)
  in

  map f g @@
  sequence2
    (required ~label:"algorithm" oid)
    (optional ~label:"params"
      (choice2 null oid))

let extensions =
  let extension =
    map (fun (oid, b, v) -> (oid, def  false b, v))
        (fun (oid, b, v) -> (oid, def' false b, v)) @@
    sequence3
      (required ~label:"id"       oid)
      (optional ~label:"critical" bool) (* default false *)
      (required ~label:"value"    octet_string)
  in
  sequence_of extension


let directory_name =
  let f = function | `C1 s -> s | `C2 s -> s | `C3 s -> s
                   | `C4 s -> s | `C5 s -> s | `C6 s -> s
  and g s = `C1 s in
  map f g @@
  choice6
    utf8_string printable_string
    (* The following three could probably be ommited.
      * See rfc5280 section 4.1.2.4. *)
    universal_string teletex_string bmp_string
    (* is this standard? *)
    ia5_string

let name =
  let attribute_tv =
   sequence2
      (required ~label:"attr type"  oid)
      (* This is ANY according to rfc5280. *)
      (required ~label:"attr value" directory_name) in
  let rd_name      = set_of attribute_tv in
  let rdn_sequence = sequence_of rd_name in
  rdn_sequence (* A vacuous choice, in the standard. *)

let version =
  map (function 2 -> `V2 | 3 -> `V3 | _ -> `V1)
      (function `V2 -> 2 | `V3 -> 3 | _ -> 1)
  int

let certificateSerialNumber = integer

let time =
  map (function `C1 t -> t | `C2 t -> t) (fun t -> `C2 t)
      (choice2 utc_time generalized_time)

let validity =
  sequence2
    (required ~label:"not before" time)
    (required ~label:"not after"  time)

let subjectPublicKeyInfo =
  sequence2
    (required ~label:"algorithm" algorithmIdentifier)
    (required ~label:"subjectPK" bit_string')

let uniqueIdentifier = bit_string'

let tBSCertificate =
  let f = fun (a, (b, (c, (d, (e, (f, (g, (h, (i, j))))))))) ->
    let extn = match j with None -> [] | Some xs -> xs
    in
    { version    = def `V1 a ; serial     = b ;
      signature  = c         ; issuer     = d ;
      validity   = e         ; subject    = f ;
      pk_info    = g         ; issuer_id  = h ;
      subject_id = i         ; extensions = extn }

  and g = fun
    { version    = a ; serial     = b ;
      signature  = c ; issuer     = d ;
      validity   = e ; subject    = f ;
      pk_info    = g ; issuer_id  = h ;
      subject_id = i ; extensions = j } ->
    let extn = match j with [] -> None | xs -> Some xs
    in
    (def' `V1 a, (b, (c, (d, (e, (f, (g, (h, (i, extn)))))))))
  in

  map f g @@
  sequence @@
      (optional ~label:"version"       @@ explicit 0 version) (* default v1 *)
    @ (required ~label:"serialNumber"  @@ certificateSerialNumber)
    @ (required ~label:"signature"     @@ algorithmIdentifier)
    @ (required ~label:"issuer"        @@ name)
    @ (required ~label:"validity"      @@ validity)
    @ (required ~label:"subject"       @@ name)
    @ (required ~label:"subjectPKInfo" @@ subjectPublicKeyInfo)
      (* if present, version is v2 or v3 *)
    @ (optional ~label:"issuerUID"     @@ implicit 1 uniqueIdentifier)
      (* if present, version is v2 or v3 *)
    @ (optional ~label:"subjectUID"    @@ implicit 2 uniqueIdentifier)
      (* v3 if present *)
   -@ (optional ~label:"extensions"    @@ explicit 3 extensions)

let (tbs_certificate_of_cstruct, tbs_certificate_to_cstruct) =
  projections ber tBSCertificate


let certificate =

  let f (a, b, c) =
    if a.signature <> b then
      parse_error "signatureAlgorithm != tbsCertificate.signature"
    else
      { tbs_cert = a; signature_algo = b; signature_val = c }

  and g { tbs_cert = a; signature_algo = b; signature_val = c } = (a, b, c) in

  map f g @@
  sequence3
    (required ~label:"tbsCertificate"     tBSCertificate)
    (required ~label:"signatureAlgorithm" algorithmIdentifier)
    (required ~label:"signatureValue"     bit_string')

let (certificate_of_cstruct, certificate_to_cstruct) =
  projections ber certificate

let rsa_public_of_cert cert =
  let oid, bits = cert.tbs_cert.pk_info in
  (* XXX check if oid is actually rsa *)
  match rsa_public_of_cstruct bits with
  | Some (k, _) -> k
  | None -> assert false


let pkcs1_digest_info =
  sequence2
    (required ~label:"digestAlgorithm" algorithmIdentifier)
    (required ~label:"digest"          octet_string)

let (pkcs1_digest_info_of_cstruct, pkcs1_digest_info_to_cstruct) =
  projections der pkcs1_digest_info

