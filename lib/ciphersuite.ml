(** Ciphersuite helper functions and definitions. Including mapping to reserved numbers and dissecting into key exchange, encryption, and hash algorithm. *)

(** sum type of all possible key exchange methods *)
type key_exchange_algorithm =
  | NULL
  | RSA
  | DH_DSS
  | DH_RSA
  | DHE_DSS
  | DHE_RSA
  | DH_anon
  | PSK
  | DHE_PSK
  | RSA_PSK
  | ECDHE_PSK
  | ECDH_ECDSA
  | ECDHE_ECDSA
  | ECDH_RSA
  | ECDHE_RSA
  | ECDH_anon
  | KRB5
  | SRP_SHA
  | SRP_SHA_RSA
  | SRP_SHA_DSS
  with sexp

(** [needs_certificate kex] is a predicate which is true if the [kex] requires a server certificate *)
let needs_certificate = function
  | DH_anon | PSK -> false
  | _ -> true

(** [needs_server_kex kex] is a predicate which is true if the [kex] requires a server key exchange messag *)
let needs_server_kex = function
  | DHE_DSS | DHE_RSA
  | DH_anon
  | ECDHE_ECDSA | ECDHE_RSA
  | ECDH_anon | ECDH_ECDSA | ECDH_RSA -> true

  | RSA | DH_DSS | DH_RSA -> false

(** [required_keytype_and_usage kex] is [(keytype, usage)] which a certificate must have if it is used in the given [kex] method *)
let required_keytype_and_usage = function
  | RSA | RSA_PSK          -> (`RSA, `Key_encipherment)
  | DHE_RSA | ECDHE_RSA    -> (`RSA, `Digital_signature) (* signing with the signature scheme and hash algorithm that will be employed in the server key exchange message. *)
(* | DHE_DSS               -> (`DSA, the certificate MUST allow the key to be used for signing with the hash algorithm that will be employed in the server key exchange message *)
  | DH_DSS | DH_RSA        -> (`DH, `Key_agreement)
(* | ECDH_ECDSA | ECDH_RSA -> (`ECDH,  the public key MUST use a curve and point format supported by the client, as described in [TLSECC]. *)
(* | ECDHE_ECDSA           -> (`ECDSA, the certificate MUST allow the key to be used for signing with the hash algorithm that will be employed in the server key exchange message.  The public key MUST use a curve and point format supported by the client, as described in  [TLSECC]. *)

(** sum type of all possible encryption algorithms *)
type encryption_algorithm =
  | NULL
  | RC4_40
  | RC4_128
  | RC2_40_CBC
  | IDEA_CBC
  | DES_40_CBC
  | DES_CBC
  | TRIPLE_DES_EDE_CBC
  | AES_128_CBC
  | AES_256_CBC
  | AES_128_GCM
  | AES_256_GCM
  | AES_128_CCM
  | AES_256_CCM
  | AES_128_CCM_8
  | AES_256_CCM_8
  | CAMELLIA_128_CBC
  | CAMELLIA_256_CBC
  | CAMELLIA_128_GCM
  | CAMELLIA_256_GCM
  | SEED_CBC
  | ARIA_128_GCM
  | ARIA_256_GCM
  | ARIA_128_CBC
  | ARIA_256_CBC
  with sexp

(** [key_length encryption_algorithm] is [(key size, IV size)] where key and IV size are the required bytes for the given [encryption_algorithm] *)
let key_lengths = function
  | IDEA_CBC -> (16, 8)
  | RC4_128 -> (16, 0)
  | TRIPLE_DES_EDE_CBC -> (24, 8)
  | SEED_CBC -> (16, 16)
  | AES_128_CBC -> (16, 16)
  | AES_256_CBC -> (32, 16)

type ciphersuite = [
  | `TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
  | `TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
  | `TLS_DHE_RSA_WITH_AES_256_CBC_SHA
  | `TLS_DHE_RSA_WITH_AES_128_CBC_SHA
  | `TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
  | `TLS_RSA_WITH_AES_256_CBC_SHA256
  | `TLS_RSA_WITH_AES_128_CBC_SHA256
  | `TLS_RSA_WITH_AES_256_CBC_SHA
  | `TLS_RSA_WITH_AES_128_CBC_SHA
  | `TLS_RSA_WITH_3DES_EDE_CBC_SHA
  | `TLS_RSA_WITH_RC4_128_SHA
  | `TLS_RSA_WITH_RC4_128_MD5
]  with sexp

let any_ciphersuite_to_ciphersuite = function
  | Packet.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> Some `TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
  | Packet.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> Some `TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
  | Packet.TLS_DHE_RSA_WITH_AES_256_CBC_SHA    -> Some `TLS_DHE_RSA_WITH_AES_256_CBC_SHA
  | Packet.TLS_DHE_RSA_WITH_AES_128_CBC_SHA    -> Some `TLS_DHE_RSA_WITH_AES_128_CBC_SHA
  | Packet.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA   -> Some `TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
  | Packet.TLS_RSA_WITH_AES_256_CBC_SHA256     -> Some `TLS_RSA_WITH_AES_256_CBC_SHA256
  | Packet.TLS_RSA_WITH_AES_128_CBC_SHA256     -> Some `TLS_RSA_WITH_AES_128_CBC_SHA256
  | Packet.TLS_RSA_WITH_AES_256_CBC_SHA        -> Some `TLS_RSA_WITH_AES_256_CBC_SHA
  | Packet.TLS_RSA_WITH_AES_128_CBC_SHA        -> Some `TLS_RSA_WITH_AES_128_CBC_SHA
  | Packet.TLS_RSA_WITH_3DES_EDE_CBC_SHA       -> Some `TLS_RSA_WITH_3DES_EDE_CBC_SHA
  | Packet.TLS_RSA_WITH_RC4_128_SHA            -> Some `TLS_RSA_WITH_RC4_128_SHA
  | Packet.TLS_RSA_WITH_RC4_128_MD5            -> Some `TLS_RSA_WITH_RC4_128_MD5
  | _                                          -> None

let ciphersuite_to_any_ciphersuite = function
  | `TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> Packet.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
  | `TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> Packet.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
  | `TLS_DHE_RSA_WITH_AES_256_CBC_SHA    -> Packet.TLS_DHE_RSA_WITH_AES_256_CBC_SHA
  | `TLS_DHE_RSA_WITH_AES_128_CBC_SHA    -> Packet.TLS_DHE_RSA_WITH_AES_128_CBC_SHA
  | `TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA   -> Packet.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
  | `TLS_RSA_WITH_AES_256_CBC_SHA256     -> Packet.TLS_RSA_WITH_AES_256_CBC_SHA256
  | `TLS_RSA_WITH_AES_128_CBC_SHA256     -> Packet.TLS_RSA_WITH_AES_128_CBC_SHA256
  | `TLS_RSA_WITH_AES_256_CBC_SHA        -> Packet.TLS_RSA_WITH_AES_256_CBC_SHA
  | `TLS_RSA_WITH_AES_128_CBC_SHA        -> Packet.TLS_RSA_WITH_AES_128_CBC_SHA
  | `TLS_RSA_WITH_3DES_EDE_CBC_SHA       -> Packet.TLS_RSA_WITH_3DES_EDE_CBC_SHA
  | `TLS_RSA_WITH_RC4_128_SHA            -> Packet.TLS_RSA_WITH_RC4_128_SHA
  | `TLS_RSA_WITH_RC4_128_MD5            -> Packet.TLS_RSA_WITH_RC4_128_MD5

let ciphersuite_to_string x= Packet.any_ciphersuite_to_string (ciphersuite_to_any_ciphersuite x)

(** [get_kex_enc_hash ciphersuite] is [(kex, enc, hash)] where it dissects the [ciphersuite] into a tuple containing the key exchange method [kex], encryption algorithm [enc], and hash algorithm [hash] *)
let get_kex_enc_hash
    : ciphersuite ->
      (key_exchange_algorithm * encryption_algorithm * hash_algorithm)
  = function
  | TLS_NULL_WITH_NULL_NULL                      -> (NULL, NULL, NULL)
  | TLS_RSA_WITH_NULL_MD5                        -> (RSA, NULL, MD5)
  | TLS_RSA_WITH_NULL_SHA                        -> (RSA, NULL, SHA)
  | TLS_RSA_EXPORT_WITH_RC4_40_MD5               -> (RSA, RC4_40, MD5)
  | TLS_RSA_WITH_RC4_128_MD5                     -> (RSA, RC4_128, MD5)
  | TLS_RSA_WITH_RC4_128_SHA                     -> (RSA, RC4_128, SHA)
  | TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5           -> (RSA, RC2_40_CBC, MD5)
  | TLS_RSA_WITH_IDEA_CBC_SHA                    -> (RSA, IDEA_CBC, SHA)
  | TLS_RSA_EXPORT_WITH_DES40_CBC_SHA            -> (RSA, DES_40_CBC, SHA)
  | TLS_RSA_WITH_DES_CBC_SHA                     -> (RSA, DES_CBC, SHA)
  | TLS_RSA_WITH_3DES_EDE_CBC_SHA                -> (RSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA         -> (DH_DSS, DES_40_CBC, SHA)
  | TLS_DH_DSS_WITH_DES_CBC_SHA                  -> (DH_DSS, DES_CBC, SHA)
  | TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA             -> (DH_DSS, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA         -> (DH_RSA, DES_40_CBC, SHA)
  | TLS_DH_RSA_WITH_DES_CBC_SHA                  -> (DH_RSA, DES_CBC, SHA)
  | TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA             -> (DH_RSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA        -> (DHE_DSS, DES_40_CBC, SHA)
  | TLS_DHE_DSS_WITH_DES_CBC_SHA                 -> (DHE_DSS, DES_CBC, SHA)
  | TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA            -> (DHE_DSS, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA        -> (DHE_RSA, DES_40_CBC, SHA)
  | TLS_DHE_RSA_WITH_DES_CBC_SHA                 -> (DHE_RSA, DES_CBC, SHA)
  | TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA            -> (DHE_RSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_DH_anon_EXPORT_WITH_RC4_40_MD5           -> (DH_anon, RC4_40, MD5)
  | TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA        -> (DH_anon, DES_40_CBC, SHA)
  | TLS_DH_anon_WITH_RC4_128_MD5                 -> (DH_anon, RC4_128, MD5)
  | TLS_DH_anon_WITH_DES_CBC_SHA                 -> (DH_anon, DES_CBC, SHA)
  | TLS_DH_anon_WITH_3DES_EDE_CBC_SHA            -> (DH_anon, TRIPLE_DES_EDE_CBC, SHA)
  | RESERVED_SSL3_1                              -> (NULL, NULL, NULL)
  | RESERVED_SSL3_2                              -> (NULL, NULL, NULL)
  | TLS_KRB5_WITH_DES_CBC_SHA                    -> (KRB5, DES_CBC, SHA)
  | TLS_KRB5_WITH_3DES_EDE_CBC_SHA               -> (KRB5, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_KRB5_WITH_RC4_128_SHA                    -> (KRB5, RC4_128, SHA)
  | TLS_KRB5_WITH_IDEA_CBC_SHA                   -> (KRB5, IDEA_CBC, SHA)
  | TLS_KRB5_WITH_DES_CBC_MD5                    -> (KRB5, DES_CBC, MD5)
  | TLS_KRB5_WITH_3DES_EDE_CBC_MD5               -> (KRB5, TRIPLE_DES_EDE_CBC, MD5)
  | TLS_KRB5_WITH_RC4_128_MD5                    -> (KRB5, RC4_128, MD5)
  | TLS_KRB5_WITH_IDEA_CBC_MD5                   -> (KRB5, IDEA_CBC, MD5)
  | TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA          -> (KRB5, DES_40_CBC, SHA)
  | TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA          -> (KRB5, RC2_40_CBC, SHA)
  | TLS_KRB5_EXPORT_WITH_RC4_40_SHA              -> (KRB5, RC4_40, SHA)
  | TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5          -> (KRB5, DES_40_CBC, MD5)
  | TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5          -> (KRB5, RC2_40_CBC, MD5)
  | TLS_KRB5_EXPORT_WITH_RC4_40_MD5              -> (KRB5, RC4_40, MD5)
  | TLS_PSK_WITH_NULL_SHA                        -> (PSK, NULL, SHA)
  | TLS_DHE_PSK_WITH_NULL_SHA                    -> (DHE_PSK, NULL, SHA)
  | TLS_RSA_PSK_WITH_NULL_SHA                    -> (RSA_PSK, NULL, SHA)
  | TLS_RSA_WITH_AES_128_CBC_SHA                 -> (RSA, AES_128_CBC, SHA)
  | TLS_DH_DSS_WITH_AES_128_CBC_SHA              -> (DH_DSS, AES_128_CBC, SHA)
  | TLS_DH_RSA_WITH_AES_128_CBC_SHA              -> (DH_RSA, AES_128_CBC, SHA)
  | TLS_DHE_DSS_WITH_AES_128_CBC_SHA             -> (DHE_DSS, AES_128_CBC, SHA)
  | TLS_DHE_RSA_WITH_AES_128_CBC_SHA             -> (DHE_RSA, AES_128_CBC, SHA)
  | TLS_DH_anon_WITH_AES_128_CBC_SHA             -> (DH_anon, AES_128_CBC, SHA)
  | TLS_RSA_WITH_AES_256_CBC_SHA                 -> (RSA, AES_256_CBC, SHA)
  | TLS_DH_DSS_WITH_AES_256_CBC_SHA              -> (DH_DSS, AES_256_CBC, SHA)
  | TLS_DH_RSA_WITH_AES_256_CBC_SHA              -> (DH_RSA, AES_256_CBC, SHA)
  | TLS_DHE_DSS_WITH_AES_256_CBC_SHA             -> (DHE_DSS, AES_256_CBC, SHA)
  | TLS_DHE_RSA_WITH_AES_256_CBC_SHA             -> (DHE_RSA, AES_256_CBC, SHA)
  | TLS_DH_anon_WITH_AES_256_CBC_SHA             -> (DH_anon, AES_256_CBC, SHA)
  | TLS_RSA_WITH_NULL_SHA256                     -> (RSA, NULL, SHA256)
  | TLS_RSA_WITH_AES_128_CBC_SHA256              -> (RSA, AES_128_CBC, SHA256)
  | TLS_RSA_WITH_AES_256_CBC_SHA256              -> (RSA, AES_256_CBC, SHA256)
  | TLS_DH_DSS_WITH_AES_128_CBC_SHA256           -> (DH_DSS, AES_128_CBC, SHA256)
  | TLS_DH_RSA_WITH_AES_128_CBC_SHA256           -> (DH_RSA, AES_128_CBC, SHA256)
  | TLS_DHE_DSS_WITH_AES_128_CBC_SHA256          -> (DHE_DSS, AES_128_CBC, SHA256)
  | TLS_RSA_WITH_CAMELLIA_128_CBC_SHA            -> (RSA, CAMELLIA_128_CBC, SHA)
  | TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA         -> (DH_DSS, CAMELLIA_128_CBC, SHA)
  | TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA         -> (DH_RSA, CAMELLIA_128_CBC, SHA)
  | TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA        -> (DHE_DSS, CAMELLIA_128_CBC, SHA)
  | TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA        -> (DHE_RSA, CAMELLIA_128_CBC, SHA)
  | TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA        -> (DH_anon, CAMELLIA_128_CBC, SHA)
  | TLS_DHE_RSA_WITH_AES_128_CBC_SHA256          -> (DHE_RSA, AES_128_CBC, SHA256)
  | TLS_DH_DSS_WITH_AES_256_CBC_SHA256           -> (DH_DSS, AES_256_CBC, SHA256)
  | TLS_DH_RSA_WITH_AES_256_CBC_SHA256           -> (DH_RSA, AES_256_CBC, SHA256)
  | TLS_DHE_DSS_WITH_AES_256_CBC_SHA256          -> (DHE_DSS, AES_256_CBC, SHA256)
  | TLS_DHE_RSA_WITH_AES_256_CBC_SHA256          -> (DHE_RSA, AES_256_CBC, SHA256)
  | TLS_DH_anon_WITH_AES_128_CBC_SHA256          -> (DH_anon, AES_128_CBC, SHA256)
  | TLS_DH_anon_WITH_AES_256_CBC_SHA256          -> (DH_anon, AES_256_CBC, SHA256)
  | TLS_RSA_WITH_CAMELLIA_256_CBC_SHA            -> (RSA, CAMELLIA_256_CBC, SHA)
  | TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA         -> (DH_DSS, CAMELLIA_256_CBC, SHA)
  | TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA         -> (DH_RSA, CAMELLIA_256_CBC, SHA)
  | TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA        -> (DHE_DSS, CAMELLIA_256_CBC, SHA)
  | TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA        -> (DHE_RSA, CAMELLIA_256_CBC, SHA)
  | TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA        -> (DH_anon, CAMELLIA_256_CBC, SHA)
  | TLS_PSK_WITH_RC4_128_SHA                     -> (PSK, RC4_128, SHA)
  | TLS_PSK_WITH_3DES_EDE_CBC_SHA                -> (PSK, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_PSK_WITH_AES_128_CBC_SHA                 -> (PSK, AES_128_CBC, SHA)
  | TLS_PSK_WITH_AES_256_CBC_SHA                 -> (PSK, AES_256_CBC, SHA)
  | TLS_DHE_PSK_WITH_RC4_128_SHA                 -> (DHE_PSK, RC4_128, SHA)
  | TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA            -> (DHE_PSK, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_DHE_PSK_WITH_AES_128_CBC_SHA             -> (DHE_PSK, AES_128_CBC, SHA)
  | TLS_DHE_PSK_WITH_AES_256_CBC_SHA             -> (DHE_PSK, AES_256_CBC, SHA)
  | TLS_RSA_PSK_WITH_RC4_128_SHA                 -> (RSA_PSK, RC4_128, SHA)
  | TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA            -> (RSA_PSK, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_RSA_PSK_WITH_AES_128_CBC_SHA             -> (RSA_PSK, AES_128_CBC, SHA)
  | TLS_RSA_PSK_WITH_AES_256_CBC_SHA             -> (RSA_PSK, AES_256_CBC, SHA)
  | TLS_RSA_WITH_SEED_CBC_SHA                    -> (RSA, SEED_CBC, SHA)
  | TLS_DH_DSS_WITH_SEED_CBC_SHA                 -> (DH_DSS, SEED_CBC, SHA)
  | TLS_DH_RSA_WITH_SEED_CBC_SHA                 -> (DH_RSA, SEED_CBC, SHA)
  | TLS_DHE_DSS_WITH_SEED_CBC_SHA                -> (DHE_DSS, SEED_CBC, SHA)
  | TLS_DHE_RSA_WITH_SEED_CBC_SHA                -> (DHE_RSA, SEED_CBC, SHA)
  | TLS_DH_anon_WITH_SEED_CBC_SHA                -> (DH_anon, SEED_CBC, SHA)
  | TLS_RSA_WITH_AES_128_GCM_SHA256              -> (RSA, AES_128_GCM, SHA256)
  | TLS_RSA_WITH_AES_256_GCM_SHA384              -> (RSA, AES_256_GCM, SHA384)
  | TLS_DHE_RSA_WITH_AES_128_GCM_SHA256          -> (DHE_RSA, AES_128_GCM, SHA256)
  | TLS_DHE_RSA_WITH_AES_256_GCM_SHA384          -> (DHE_RSA, AES_256_GCM, SHA384)
  | TLS_DH_RSA_WITH_AES_128_GCM_SHA256           -> (DH_RSA, AES_128_GCM, SHA256)
  | TLS_DH_RSA_WITH_AES_256_GCM_SHA384           -> (DH_RSA, AES_256_GCM, SHA384)
  | TLS_DHE_DSS_WITH_AES_128_GCM_SHA256          -> (DHE_DSS, AES_128_GCM, SHA256)
  | TLS_DHE_DSS_WITH_AES_256_GCM_SHA384          -> (DHE_DSS, AES_256_GCM, SHA384)
  | TLS_DH_DSS_WITH_AES_128_GCM_SHA256           -> (DH_DSS, AES_128_GCM, SHA256)
  | TLS_DH_DSS_WITH_AES_256_GCM_SHA384           -> (DH_DSS, AES_256_GCM, SHA384)
  | TLS_DH_anon_WITH_AES_128_GCM_SHA256          -> (DH_anon, AES_128_GCM, SHA256)
  | TLS_DH_anon_WITH_AES_256_GCM_SHA384          -> (DH_anon, AES_256_GCM, SHA384)
  | TLS_PSK_WITH_AES_128_GCM_SHA256              -> (PSK, AES_128_GCM, SHA256)
  | TLS_PSK_WITH_AES_256_GCM_SHA384              -> (PSK, AES_256_GCM, SHA384)
  | TLS_DHE_PSK_WITH_AES_128_GCM_SHA256          -> (DHE_PSK, AES_128_GCM, SHA256)
  | TLS_DHE_PSK_WITH_AES_256_GCM_SHA384          -> (DHE_PSK, AES_256_GCM, SHA384)
  | TLS_RSA_PSK_WITH_AES_128_GCM_SHA256          -> (RSA_PSK, AES_128_GCM, SHA256)
  | TLS_RSA_PSK_WITH_AES_256_GCM_SHA384          -> (RSA_PSK, AES_256_GCM, SHA384)
  | TLS_PSK_WITH_AES_128_CBC_SHA256              -> (PSK, AES_128_CBC, SHA256)
  | TLS_PSK_WITH_AES_256_CBC_SHA384              -> (PSK, AES_256_CBC, SHA384)
  | TLS_PSK_WITH_NULL_SHA256                     -> (PSK, NULL, SHA256)
  | TLS_PSK_WITH_NULL_SHA384                     -> (PSK, NULL, SHA384)
  | TLS_DHE_PSK_WITH_AES_128_CBC_SHA256          -> (DHE_PSK, AES_128_CBC, SHA256)
  | TLS_DHE_PSK_WITH_AES_256_CBC_SHA384          -> (DHE_PSK, AES_256_CBC, SHA384)
  | TLS_DHE_PSK_WITH_NULL_SHA256                 -> (DHE_PSK, NULL, SHA256)
  | TLS_DHE_PSK_WITH_NULL_SHA384                 -> (DHE_PSK, NULL, SHA384)
  | TLS_RSA_PSK_WITH_AES_128_CBC_SHA256          -> (RSA_PSK, AES_128_CBC, SHA256)
  | TLS_RSA_PSK_WITH_AES_256_CBC_SHA384          -> (RSA_PSK, AES_256_CBC, SHA384)
  | TLS_RSA_PSK_WITH_NULL_SHA256                 -> (RSA_PSK, NULL, SHA256)
  | TLS_RSA_PSK_WITH_NULL_SHA384                 -> (RSA_PSK, NULL, SHA384)
  | TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256         -> (RSA, CAMELLIA_128_CBC, SHA256)
  | TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256      -> (DH_DSS, CAMELLIA_128_CBC, SHA256)
  | TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256      -> (DH_RSA, CAMELLIA_128_CBC, SHA256)
  | TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256     -> (DHE_DSS, CAMELLIA_128_CBC, SHA256)
  | TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256     -> (DHE_RSA, CAMELLIA_128_CBC, SHA256)
  | TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256     -> (DH_anon, CAMELLIA_128_CBC, SHA256)
  | TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256         -> (RSA, CAMELLIA_256_CBC, SHA256)
  | TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256      -> (DH_DSS, CAMELLIA_256_CBC, SHA256)
  | TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256      -> (DH_RSA, CAMELLIA_256_CBC, SHA256)
  | TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256     -> (DHE_DSS, CAMELLIA_256_CBC, SHA256)
  | TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256     -> (DHE_RSA, CAMELLIA_256_CBC, SHA256)
  | TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256     -> (DH_anon, CAMELLIA_256_CBC, SHA256)
  | TLS_EMPTY_RENEGOTIATION_INFO_SCSV            -> (NULL, NULL, NULL)
  | TLS_ECDH_ECDSA_WITH_NULL_SHA                 -> (ECDH_ECDSA, NULL, SHA)
  | TLS_ECDH_ECDSA_WITH_RC4_128_SHA              -> (ECDH_ECDSA, RC4_128, SHA)
  | TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA         -> (ECDH_ECDSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA          -> (ECDH_ECDSA, AES_128_CBC, SHA)
  | TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA          -> (ECDH_ECDSA, AES_256_CBC, SHA)
  | TLS_ECDHE_ECDSA_WITH_NULL_SHA                -> (ECDHE_ECDSA, NULL, SHA)
  | TLS_ECDHE_ECDSA_WITH_RC4_128_SHA             -> (ECDHE_ECDSA, RC4_128, SHA)
  | TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA        -> (ECDHE_ECDSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA         -> (ECDHE_ECDSA, AES_128_CBC, SHA)
  | TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA         -> (ECDHE_ECDSA, AES_256_CBC, SHA)
  | TLS_ECDH_RSA_WITH_NULL_SHA                   -> (ECDH_RSA, NULL, SHA)
  | TLS_ECDH_RSA_WITH_RC4_128_SHA                -> (ECDH_RSA, RC4_128, SHA)
  | TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA           -> (ECDH_RSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_ECDH_RSA_WITH_AES_128_CBC_SHA            -> (ECDH_RSA, AES_128_CBC, SHA)
  | TLS_ECDH_RSA_WITH_AES_256_CBC_SHA            -> (ECDH_RSA, AES_256_CBC, SHA)
  | TLS_ECDHE_RSA_WITH_NULL_SHA                  -> (ECDHE_RSA, NULL, SHA)
  | TLS_ECDHE_RSA_WITH_RC4_128_SHA               -> (ECDHE_RSA, RC4_128, SHA)
  | TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA          -> (ECDHE_RSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA           -> (ECDHE_RSA, AES_128_CBC, SHA)
  | TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA           -> (ECDHE_RSA, AES_256_CBC, SHA)
  | TLS_ECDH_anon_WITH_NULL_SHA                  -> (ECDH_anon, NULL, SHA)
  | TLS_ECDH_anon_WITH_RC4_128_SHA               -> (ECDH_anon, RC4_128, SHA)
  | TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA          -> (ECDH_anon, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_ECDH_anon_WITH_AES_128_CBC_SHA           -> (ECDH_anon, AES_128_CBC, SHA)
  | TLS_ECDH_anon_WITH_AES_256_CBC_SHA           -> (ECDH_anon, AES_256_CBC, SHA)
  | TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA            -> (SRP_SHA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA        -> (SRP_SHA_RSA, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA        -> (SRP_SHA_DSS, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_SRP_SHA_WITH_AES_128_CBC_SHA             -> (SRP_SHA, AES_128_CBC, SHA)
  | TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA         -> (SRP_SHA_RSA, AES_128_CBC, SHA)
  | TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA         -> (SRP_SHA_DSS, AES_128_CBC, SHA)
  | TLS_SRP_SHA_WITH_AES_256_CBC_SHA             -> (SRP_SHA, AES_256_CBC, SHA)
  | TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA         -> (SRP_SHA_RSA, AES_256_CBC, SHA)
  | TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA         -> (SRP_SHA_DSS, AES_256_CBC, SHA)
  | TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256      -> (ECDHE_ECDSA, AES_128_CBC, SHA256)
  | TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384      -> (ECDHE_ECDSA, AES_256_CBC, SHA384)
  | TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256       -> (ECDH_ECDSA, AES_128_CBC, SHA256)
  | TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384       -> (ECDH_ECDSA, AES_256_CBC, SHA384)
  | TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256        -> (ECDHE_RSA, AES_128_CBC, SHA256)
  | TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384        -> (ECDHE_RSA, AES_256_CBC, SHA384)
  | TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256         -> (ECDH_RSA, AES_128_CBC, SHA256)
  | TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384         -> (ECDH_RSA, AES_256_CBC, SHA384)
  | TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256      -> (ECDHE_ECDSA, AES_128_GCM, SHA256)
  | TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384      -> (ECDHE_ECDSA, AES_256_GCM, SHA384)
  | TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256       -> (ECDH_ECDSA, AES_128_GCM, SHA256)
  | TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384       -> (ECDH_ECDSA, AES_256_GCM, SHA384)
  | TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256        -> (ECDHE_RSA, AES_128_GCM, SHA256)
  | TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384        -> (ECDHE_RSA, AES_256_GCM, SHA384)
  | TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256         -> (ECDH_RSA, AES_128_GCM, SHA256)
  | TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384         -> (ECDH_RSA, AES_256_GCM, SHA384)
  | TLS_ECDHE_PSK_WITH_RC4_128_SHA               -> (ECDHE_PSK, RC4_128, SHA)
  | TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA          -> (ECDHE_PSK, TRIPLE_DES_EDE_CBC, SHA)
  | TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA           -> (ECDHE_PSK, AES_128_CBC, SHA)
  | TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA           -> (ECDHE_PSK, AES_256_CBC, SHA)
  | TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256        -> (ECDHE_PSK, AES_128_CBC, SHA256)
  | TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384        -> (ECDHE_PSK, AES_256_CBC, SHA384)
  | TLS_ECDHE_PSK_WITH_NULL_SHA                  -> (ECDHE_PSK, NULL, SHA)
  | TLS_ECDHE_PSK_WITH_NULL_SHA256               -> (ECDHE_PSK, NULL, SHA256)
  | TLS_ECDHE_PSK_WITH_NULL_SHA384               -> (ECDHE_PSK, NULL, SHA384)
  | TLS_RSA_WITH_ARIA_128_CBC_SHA256             -> (RSA, ARIA_128_CBC, SHA256)
  | TLS_RSA_WITH_ARIA_256_CBC_SHA384             -> (RSA, ARIA_256_CBC, SHA384)
  | TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256          -> (DH_DSS, ARIA_128_CBC, SHA256)
  | TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384          -> (DH_DSS, ARIA_256_CBC, SHA384)
  | TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256          -> (DH_RSA, ARIA_128_CBC, SHA256)
  | TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384          -> (DH_RSA, ARIA_256_CBC, SHA384)
  | TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256         -> (DHE_DSS, ARIA_128_CBC, SHA256)
  | TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384         -> (DHE_DSS, ARIA_256_CBC, SHA384)
  | TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256         -> (DHE_RSA, ARIA_128_CBC, SHA256)
  | TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384         -> (DHE_RSA, ARIA_256_CBC, SHA384)
  | TLS_DH_anon_WITH_ARIA_128_CBC_SHA256         -> (DH_anon, ARIA_128_CBC, SHA256)
  | TLS_DH_anon_WITH_ARIA_256_CBC_SHA384         -> (DH_anon, ARIA_256_CBC, SHA384)
  | TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256     -> (ECDHE_ECDSA, ARIA_128_CBC, SHA256)
  | TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384     -> (ECDHE_ECDSA, ARIA_256_CBC, SHA384)
  | TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256      -> (ECDH_ECDSA, ARIA_128_CBC, SHA256)
  | TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384      -> (ECDH_ECDSA, ARIA_256_CBC, SHA384)
  | TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256       -> (ECDHE_RSA, ARIA_128_CBC, SHA256)
  | TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384       -> (ECDHE_RSA, ARIA_256_CBC, SHA384)
  | TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256        -> (ECDH_RSA, ARIA_128_CBC, SHA256)
  | TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384        -> (ECDH_RSA, ARIA_256_CBC, SHA384)
  | TLS_RSA_WITH_ARIA_128_GCM_SHA256             -> (RSA, ARIA_128_GCM, SHA256)
  | TLS_RSA_WITH_ARIA_256_GCM_SHA384             -> (RSA, ARIA_256_GCM, SHA384)
  | TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256         -> (DHE_RSA, ARIA_128_GCM, SHA256)
  | TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384         -> (DHE_RSA, ARIA_256_GCM, SHA384)
  | TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256          -> (DH_RSA, ARIA_128_GCM, SHA256)
  | TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384          -> (DH_RSA, ARIA_256_GCM, SHA384)
  | TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256         -> (DHE_DSS, ARIA_128_GCM, SHA256)
  | TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384         -> (DHE_DSS, ARIA_256_GCM, SHA384)
  | TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256          -> (DH_DSS, ARIA_128_GCM, SHA256)
  | TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384          -> (DH_DSS, ARIA_256_GCM, SHA384)
  | TLS_DH_anon_WITH_ARIA_128_GCM_SHA256         -> (DH_anon, ARIA_128_GCM, SHA256)
  | TLS_DH_anon_WITH_ARIA_256_GCM_SHA384         -> (DH_anon, ARIA_256_GCM, SHA384)
  | TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256     -> (ECDHE_ECDSA, ARIA_128_GCM, SHA256)
  | TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384     -> (ECDHE_ECDSA, ARIA_256_GCM, SHA384)
  | TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256      -> (ECDH_ECDSA, ARIA_128_GCM, SHA256)
  | TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384      -> (ECDH_ECDSA, ARIA_256_GCM, SHA384)
  | TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256       -> (ECDHE_RSA, ARIA_128_GCM, SHA256)
  | TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384       -> (ECDHE_RSA, ARIA_256_GCM, SHA384)
  | TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256        -> (ECDH_RSA, ARIA_128_GCM, SHA256)
  | TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384        -> (ECDH_RSA, ARIA_256_GCM, SHA384)
  | TLS_PSK_WITH_ARIA_128_CBC_SHA256             -> (PSK, ARIA_128_CBC, SHA256)
  | TLS_PSK_WITH_ARIA_256_CBC_SHA384             -> (PSK, ARIA_256_CBC, SHA384)
  | TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256         -> (DHE_PSK, ARIA_128_CBC, SHA256)
  | TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384         -> (DHE_PSK, ARIA_256_CBC, SHA384)
  | TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256         -> (RSA_PSK, ARIA_128_CBC, SHA256)
  | TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384         -> (RSA_PSK, ARIA_256_CBC, SHA384)
  | TLS_PSK_WITH_ARIA_128_GCM_SHA256             -> (PSK, ARIA_128_GCM, SHA256)
  | TLS_PSK_WITH_ARIA_256_GCM_SHA384             -> (PSK, ARIA_256_GCM, SHA384)
  | TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256         -> (DHE_PSK, ARIA_128_GCM, SHA256)
  | TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384         -> (DHE_PSK, ARIA_256_GCM, SHA384)
  | TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256         -> (RSA_PSK, ARIA_128_GCM, SHA256)
  | TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384         -> (RSA_PSK, ARIA_256_GCM, SHA384)
  | TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256       -> (ECDHE_PSK, ARIA_128_CBC, SHA256)
  | TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384       -> (ECDHE_PSK, ARIA_256_CBC, SHA384)
  | TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 -> (ECDHE_ECDSA, CAMELLIA_128_CBC, SHA256)
  | TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 -> (ECDHE_ECDSA, CAMELLIA_256_CBC, SHA384)
  | TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256  -> (ECDH_ECDSA, CAMELLIA_128_CBC, SHA256)
  | TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384  -> (ECDH_ECDSA, CAMELLIA_256_CBC, SHA384)
  | TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   -> (ECDHE_RSA, CAMELLIA_128_CBC, SHA256)
  | TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   -> (ECDHE_RSA, CAMELLIA_256_CBC, SHA384)
  | TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256    -> (ECDH_RSA, CAMELLIA_128_CBC, SHA256)
  | TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384    -> (ECDH_RSA, CAMELLIA_256_CBC, SHA384)
  | TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256         -> (RSA, CAMELLIA_128_GCM, SHA256)
  | TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384         -> (RSA, CAMELLIA_256_GCM, SHA384)
  | TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256     -> (DHE_RSA, CAMELLIA_128_GCM, SHA256)
  | TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384     -> (DHE_RSA, CAMELLIA_256_GCM, SHA384)
  | TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256      -> (DH_RSA, CAMELLIA_128_GCM, SHA256)
  | TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384      -> (DH_RSA, CAMELLIA_256_GCM, SHA384)
  | TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256     -> (DHE_DSS, CAMELLIA_128_GCM, SHA256)
  | TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384     -> (DHE_DSS, CAMELLIA_256_GCM, SHA384)
  | TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256      -> (DH_DSS, CAMELLIA_128_GCM, SHA256)
  | TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384      -> (DH_DSS, CAMELLIA_256_GCM, SHA384)
  | TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256     -> (DH_anon, CAMELLIA_128_GCM, SHA256)
  | TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384     -> (DH_anon, CAMELLIA_256_GCM, SHA384)
  | TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 -> (ECDHE_ECDSA, CAMELLIA_128_GCM, SHA256)
  | TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 -> (ECDHE_ECDSA, CAMELLIA_256_GCM, SHA384)
  | TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256  -> (ECDH_ECDSA, CAMELLIA_128_GCM, SHA256)
  | TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384  -> (ECDH_ECDSA, CAMELLIA_256_GCM, SHA384)
  | TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256   -> (ECDHE_RSA, CAMELLIA_128_GCM, SHA256)
  | TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384   -> (ECDHE_RSA, CAMELLIA_256_GCM, SHA384)
  | TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256    -> (ECDH_RSA, CAMELLIA_128_GCM, SHA256)
  | TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384    -> (ECDH_RSA, CAMELLIA_256_GCM, SHA384)
  | TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256         -> (PSK, CAMELLIA_128_GCM, SHA256)
  | TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384         -> (PSK, CAMELLIA_256_GCM, SHA384)
  | TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256     -> (DHE_PSK, CAMELLIA_128_GCM, SHA256)
  | TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384     -> (DHE_PSK, CAMELLIA_256_GCM, SHA384)
  | TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256     -> (RSA_PSK, CAMELLIA_128_GCM, SHA256)
  | TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384     -> (RSA_PSK, CAMELLIA_256_GCM, SHA384)
  | TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256         -> (PSK, CAMELLIA_128_CBC, SHA256)
  | TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384         -> (PSK, CAMELLIA_256_CBC, SHA384)
  | TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256     -> (DHE_PSK, CAMELLIA_128_CBC, SHA256)
  | TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384     -> (DHE_PSK, CAMELLIA_256_CBC, SHA384)
  | TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256     -> (RSA_PSK, CAMELLIA_128_CBC, SHA256)
  | TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384     -> (RSA_PSK, CAMELLIA_256_CBC, SHA384)
  | TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   -> (ECDHE_PSK, CAMELLIA_128_CBC, SHA256)
  | TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   -> (ECDHE_PSK, CAMELLIA_256_CBC, SHA384)
  | TLS_RSA_WITH_AES_128_CCM                     -> (RSA, AES_128_CCM, NULL)
  | TLS_RSA_WITH_AES_256_CCM                     -> (RSA, AES_256_CCM, NULL)
  | TLS_DHE_RSA_WITH_AES_128_CCM                 -> (DHE_RSA, AES_128_CCM, NULL)
  | TLS_DHE_RSA_WITH_AES_256_CCM                 -> (DHE_RSA, AES_256_CCM, NULL)
  | TLS_RSA_WITH_AES_128_CCM_8                   -> (RSA, AES_128_CCM_8, NULL)
  | TLS_RSA_WITH_AES_256_CCM_8                   -> (RSA, AES_256_CCM_8, NULL)
  | TLS_DHE_RSA_WITH_AES_128_CCM_8               -> (DHE_RSA, AES_128_CCM_8, NULL)
  | TLS_DHE_RSA_WITH_AES_256_CCM_8               -> (DHE_RSA, AES_256_CCM_8, NULL)
  | TLS_PSK_WITH_AES_128_CCM                     -> (PSK, AES_128_CCM, NULL)
  | TLS_PSK_WITH_AES_256_CCM                     -> (PSK, AES_256_CCM, NULL)
  | TLS_DHE_PSK_WITH_AES_128_CCM                 -> (DHE_PSK, AES_128_CCM, NULL)
  | TLS_DHE_PSK_WITH_AES_256_CCM                 -> (DHE_PSK, AES_256_CCM, NULL)
  | TLS_PSK_WITH_AES_128_CCM_8                   -> (PSK, AES_128_CCM_8, NULL)
  | TLS_PSK_WITH_AES_256_CCM_8                   -> (PSK, AES_256_CCM_8, NULL)
  | TLS_PSK_DHE_WITH_AES_128_CCM_8               -> (DHE_PSK, AES_128_CCM_8, NULL)
  | TLS_PSK_DHE_WITH_AES_256_CCM_8               -> (DHE_PSK, AES_256_CCM_8, NULL)

(** [ciphersuite_kex ciphersuite] is [kex], first projection of [get_kex_enc_hash] *)
let ciphersuite_kex c = let (k, _, _) = get_kex_enc_hash c in k

(** [ciphersuite_cipher ciphersuite] is [enc], second projection of [get_kex_enc_hash] *)
let ciphersuite_cipher c = let (_, k, _) = get_kex_enc_hash c in k

(** [ciphersuite_mac ciphersuite] is [hash], third projection of [get_kex_enc_hash] *)
let ciphersuite_mac c = let (_, _, k) = get_kex_enc_hash c in k

(** [ciphersuite_cipher_mac_length ciphersuite] is [(key size, IV size)] of the given [ciphersuite], using [key_lengths] *)
let ciphersuite_cipher_mac_length c =
  let cipher = ciphersuite_cipher c in
  key_lengths cipher

(** [null_cipher ciphersuite] is a predicate returning true if any of the elements (kex, enc, hash) is [NULL] *)
let null_cipher c =
  match get_kex_enc_hash c with
  | NULL, _, _ -> true
  | _, NULL, _ -> true
  | _, _, NULL -> true
  | _          -> false
