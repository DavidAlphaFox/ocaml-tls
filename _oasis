OASISFormat: 0.4
Name:        ocaml-tls
Version:     0.0.1
Synopsis:    TLS support for ocaml
Authors:     Hannes Mehnert <hannes@mehnert.org>, David Kaloper <david@numm.org>
Maintainers: David Kaloper <david@numm.org>, Hannes Mehnert <hannes@mehnert.org>
Homepage:    https://github.com/mirleft/ocaml-tls
License:     FreeBSD
Plugins:     META (0.4)
Description:
  TLS support on top of OCaml
BuildTools:  ocamlbuild


Flag "lwt"
  Description : Lwt_unix backend
  Default     : true

Flag "mirage"
  Description : Mirage backend
  Default     : true

Library "x509"
  Path            : libx509/
  Modules         : List_ext, Registry, Asn_grammars, Certificate, X509
  BuildDepends    : cstruct, sexplib.syntax, nocrypto, asn1-combinators

Library "tls"
  Path            : lib/
  Modules         : Utils, Sexp_ext, Tracing,
                    Ciphersuite, Packet, Core,
                    Printer, Reader, Writer, Crypto, Config,
                    State, Handshake_common, Handshake_crypto,
                    Handshake_server, Handshake_client,
                    Engine
  InternalModules : Control
  Pack            : true
  BuildDepends    : cstruct.syntax, sexplib.syntax, nocrypto, x509

# Library "tls"
#   Path            : lib/
#   Modules         : Utils, Sexp_ext, Tracing,
#                     Ciphersuite, Packet, Core, Certificate,
#                     Printer, Reader, Writer, Crypto, Config,
#                     State, Handshake_common, Handshake_crypto,
#                     Handshake_server, Handshake_client,
#                     X509, Engine
#   InternalModules : Registry, Asn_grammars, Control
#   Pack            : true
#   BuildDepends    : cstruct, cstruct.syntax,
#                     sexplib, sexplib.syntax,
#                     nocrypto, asn1-combinators
#, bisect

Library "tests"
  Path            : tests/
  Modules         : Testlib, Readertests, Writertests, Readerwritertests, Handshakes, X509tests, Unittests
  Install         : false
  Build          $: flag(tests)
  BuildDepends    : tls, oUnit, cstruct.unix

Library "tls-lwt"
  Build          $: flag(lwt)
  FindlibName     : lwt
  FindlibParent   : tls
  Path            : lwt
  Modules         : Tls_lwt, X509_lwt
  BuildDepends    : x509, tls, lwt.syntax, lwt.unix

Library "tls-mirage"
  Build          $: flag(mirage)
  FindlibName     : mirage
  FindlibParent   : tls
  Path            : mirage
  Modules         : Tls_mirage
  BuildDepends    : x509, tls, mirage, lwt, lwt.syntax

Executable "test_runner"
  Build          $: flag(tests)
  Path            : tests/
  Install         : false
  CompiledObject  : native
  MainIs          : unittestrunner.ml
  BuildDepends    : tls, tests

Test it
  Command         : $test_runner -runner sequential
  Run            $: flag(tests)
#  PostCommand     : (cd _build; bisect-report -html ../coverage `find ../ -name 'bisect*.out'` ; find ../ -name 'bisect*.out' -delete)

# Random examples.

Executable "feedback"
  Build          $: flag(tests)
  Path            : tests/
  Install         : false
  CompiledObject  : native
  MainIs          : feedback.ml
  BuildDepends    : tests, cstruct.unix

Executable "echo_server"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : echo_server.ml
  BuildDepends    : tls.lwt

Executable "echo_client"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : echo_client.ml
  BuildDepends    : tls.lwt

Executable "http_client"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : http_client.ml
  BuildDepends    : tls.lwt

Executable "test_server"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : test_server.ml
  BuildDepends    : tls.lwt

Executable "test_client"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : test_client.ml
  BuildDepends    : tls.lwt

